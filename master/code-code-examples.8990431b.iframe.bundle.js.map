{"version":3,"file":"code-code-examples.8990431b.iframe.bundle.js","mappings":";;;;;AAiNA","sources":["webpack://@jetbrains/ring-ui/./src/code/code.examples.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-expect-error (Converted from ts-ignore)\n    var __STORY__ = \"import React from 'react';\\nimport javascript from 'highlight.js/lib/languages/javascript';\\nimport xml from 'highlight.js/lib/languages/xml';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Code, {code, highlight} from './code';\\n\\nhighlight.registerLanguage('javascript', javascript);\\nhighlight.registerLanguage('xml', xml);\\n\\nexport default {\\n  title: 'Components/Code',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: `\\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\\n\\nYou can also preload the languages you need:\\n\\n\\\\`import {highlight} from '../code/code'\\\\`\\n\\n\\\\`import 1c from 'highlight.js/lib/languages/1c';\\\\`\\n\\n\\\\`highlight.registerLanguage('1c', 1c);\\\\`\\n    `\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Code\\n    code={`\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const lazy = () => (\\n  <Code\\n    language=\\\"actionscript\\\"\\n    code={`\\n      package org.example.dummy {\\n          import org.dummy.*;\\n\\n          /*define package inline interface*/\\n          public interface IFooBarzable {\\n              public function foo(... pairs):Array;\\n          }\\n\\n          public class FooBar implements IFooBarzable {\\n              static private var cnt:uint = 0;\\n              private var bar:String;\\n\\n              //constructor\\n              public function TestBar(bar:String):void {\\n                  bar = bar;\\n                  ++cnt;\\n              }\\n\\n              public function foo(... pairs):Array {\\n                  pairs.push(bar);\\n                  return pairs;\\n              }\\n          }\\n      }\\n    `}\\n  />\\n);\\n\\nexport const taggedTemplate = () =>\\n  code`\\n      import React from 'react';\\n      import {code} from '../code/code';\\n\\n      const el = code\\\\`some('js')\\\\`;\\n    `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\\ntaggedTemplate.parameters = {\\n  hermione: {skip: true}\\n};\\n\";\n    // @ts-expect-error (Converted from ts-ignore)\n    var __LOCATIONS_MAP__ = {\n  \"basic\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 31\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 44\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 31\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 44\n    }\n  },\n  \"lazy\": {\n    \"startLoc\": {\n      \"col\": 20,\n      \"line\": 48\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 78\n    },\n    \"startBody\": {\n      \"col\": 20,\n      \"line\": 48\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 78\n    }\n  },\n  \"taggedTemplate\": {\n    \"startLoc\": {\n      \"col\": 30,\n      \"line\": 80\n    },\n    \"endLoc\": {\n      \"col\": 5,\n      \"line\": 86\n    },\n    \"startBody\": {\n      \"col\": 30,\n      \"line\": 80\n    },\n    \"endBody\": {\n      \"col\": 5,\n      \"line\": 86\n    }\n  }\n};\n    \nimport React from 'react';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport xml from 'highlight.js/lib/languages/xml';\n\nimport reactDecorator from '../../.storybook/react-decorator';\n\nimport Code, {code, highlight} from './code';\n\nhighlight.registerLanguage('javascript', javascript);\nhighlight.registerLanguage('xml', xml);\n\nexport default {\n  title: 'Components/Code',\n  decorators: [reactDecorator()],\n\n  parameters: {\n  \"storySource\": {\n    \"source\": \"import React from 'react';\\nimport javascript from 'highlight.js/lib/languages/javascript';\\nimport xml from 'highlight.js/lib/languages/xml';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Code, {code, highlight} from './code';\\n\\nhighlight.registerLanguage('javascript', javascript);\\nhighlight.registerLanguage('xml', xml);\\n\\nexport default {\\n  title: 'Components/Code',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: `\\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\\n\\nYou can also preload the languages you need:\\n\\n\\\\`import {highlight} from '../code/code'\\\\`\\n\\n\\\\`import 1c from 'highlight.js/lib/languages/1c';\\\\`\\n\\n\\\\`highlight.registerLanguage('1c', 1c);\\\\`\\n    `\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Code\\n    code={`\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const lazy = () => (\\n  <Code\\n    language=\\\"actionscript\\\"\\n    code={`\\n      package org.example.dummy {\\n          import org.dummy.*;\\n\\n          /*define package inline interface*/\\n          public interface IFooBarzable {\\n              public function foo(... pairs):Array;\\n          }\\n\\n          public class FooBar implements IFooBarzable {\\n              static private var cnt:uint = 0;\\n              private var bar:String;\\n\\n              //constructor\\n              public function TestBar(bar:String):void {\\n                  bar = bar;\\n                  ++cnt;\\n              }\\n\\n              public function foo(... pairs):Array {\\n                  pairs.push(bar);\\n                  return pairs;\\n              }\\n          }\\n      }\\n    `}\\n  />\\n);\\n\\nexport const taggedTemplate = () =>\\n  code`\\n      import React from 'react';\\n      import {code} from '../code/code';\\n\\n      const el = code\\\\`some('js')\\\\`;\\n    `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\\ntaggedTemplate.parameters = {\\n  hermione: {skip: true}\\n};\\n\",\n    \"locationsMap\": {\n      \"basic\": {\n        \"startLoc\": {\n          \"col\": 21,\n          \"line\": 31\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 44\n        },\n        \"startBody\": {\n          \"col\": 21,\n          \"line\": 31\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 44\n        }\n      },\n      \"lazy\": {\n        \"startLoc\": {\n          \"col\": 20,\n          \"line\": 48\n        },\n        \"endLoc\": {\n          \"col\": 1,\n          \"line\": 78\n        },\n        \"startBody\": {\n          \"col\": 20,\n          \"line\": 48\n        },\n        \"endBody\": {\n          \"col\": 1,\n          \"line\": 78\n        }\n      },\n      \"tagged-template\": {\n        \"startLoc\": {\n          \"col\": 30,\n          \"line\": 80\n        },\n        \"endLoc\": {\n          \"col\": 5,\n          \"line\": 86\n        },\n        \"startBody\": {\n          \"col\": 30,\n          \"line\": 80\n        },\n        \"endBody\": {\n          \"col\": 5,\n          \"line\": 86\n        }\n      }\n    }\n  }\n,\n    notes: `\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\n\nYou can also preload the languages you need:\n\n\\`import {highlight} from '../code/code'\\`\n\n\\`import 1c from 'highlight.js/lib/languages/1c';\\`\n\n\\`highlight.registerLanguage('1c', 1c);\\`\n    `\n  },};\n\nexport const basic = () => (\n  <Code\n    code={`\n          import React, {Component} from 'react';\n          import ChildComponent from './child-component';\n\n          const MyComponent = () => (\n            <div className=\"class\">\n              <ChildComponent prop=\"value\" />\n            </div>\n          );\n        `}\n  />\n);;\n\nbasic.storyName = 'basic';\n\nexport const lazy = () => (\n  <Code\n    language=\"actionscript\"\n    code={`\n      package org.example.dummy {\n          import org.dummy.*;\n\n          /*define package inline interface*/\n          public interface IFooBarzable {\n              public function foo(... pairs):Array;\n          }\n\n          public class FooBar implements IFooBarzable {\n              static private var cnt:uint = 0;\n              private var bar:String;\n\n              //constructor\n              public function TestBar(bar:String):void {\n                  bar = bar;\n                  ++cnt;\n              }\n\n              public function foo(... pairs):Array {\n                  pairs.push(bar);\n                  return pairs;\n              }\n          }\n      }\n    `}\n  />\n);;\n\nexport const taggedTemplate = () =>\n  code`\n      import React from 'react';\n      import {code} from '../code/code';\n\n      const el = code\\`some('js')\\`;\n    `;\n\ntaggedTemplate.storyName = 'tagged template';\n\ntaggedTemplate.parameters = {\n  hermione: {skip: true}\n};\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"main.03851a6f.iframe.bundle.js","mappings":";;;;;AA8FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsBA","sources":["webpack://@jetbrains/ring-ui/./components/code/code.examples.js","webpack://@jetbrains/ring-ui/./components/markdown/markdown.examples.js"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport javascript from 'highlight.js/lib/languages/javascript';\\nimport xml from 'highlight.js/lib/languages/xml';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Code, {code, highlight} from '@jetbrains/ring-ui/components/code/code';\\n\\nhighlight.registerLanguage('javascript', javascript);\\nhighlight.registerLanguage('xml', xml);\\n\\nexport default {\\n  title: 'Components/Code',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: `\\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\\n\\nYou can also preload the languages you need:\\n\\n\\\\`import {highlight} from '@jetbrains/ring-ui/components/code/code'\\\\`\\n\\n\\\\`import 1c from 'highlight.js/lib/languages/1c';\\\\`\\n\\n\\\\`highlight.registerLanguage('1c', 1c);\\\\`\\n    `\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Code\\n    code={`\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const lazy = () => (\\n  <Code\\n    language=\\\"actionscript\\\"\\n    code={`\\n      package org.example.dummy {\\n          import org.dummy.*;\\n\\n          /*define package inline interface*/\\n          public interface IFooBarzable {\\n              public function foo(... pairs):Array;\\n          }\\n\\n          public class FooBar implements IFooBarzable {\\n              static private var cnt:uint = 0;\\n              private var bar:String;\\n\\n              //constructor\\n              public function TestBar(bar:String):void {\\n                  bar = bar;\\n                  ++cnt;\\n              }\\n\\n              public function foo(... pairs):Array {\\n                  pairs.push(bar);\\n                  return pairs;\\n              }\\n          }\\n      }\\n    `}\\n  />\\n);\\n\\nexport const taggedTemplate = () =>\\n  code`\\n      import React from 'react';\\n      import {code} from '@jetbrains/ring-ui/components/code/code';\\n\\n      const el = code\\\\`some('js')\\\\`;\\n    `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\\ntaggedTemplate.parameters = {\\n  hermione: {skip: true}\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"basic\":{\"startLoc\":{\"col\":21,\"line\":31},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":21,\"line\":31},\"endBody\":{\"col\":1,\"line\":44}},\"lazy\":{\"startLoc\":{\"col\":20,\"line\":48},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":48},\"endBody\":{\"col\":1,\"line\":78}},\"taggedTemplate\":{\"startLoc\":{\"col\":30,\"line\":80},\"endLoc\":{\"col\":5,\"line\":86},\"startBody\":{\"col\":30,\"line\":80},\"endBody\":{\"col\":5,\"line\":86}}};\n    \nimport React from 'react';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport xml from 'highlight.js/lib/languages/xml';\n\nimport reactDecorator from '../../.storybook/react-decorator';\n\nimport Code, {code, highlight} from '@jetbrains/ring-ui/components/code/code';\n\nhighlight.registerLanguage('javascript', javascript);\nhighlight.registerLanguage('xml', xml);\n\nexport default {\n  title: 'Components/Code',\n  decorators: [reactDecorator()],\n\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport javascript from 'highlight.js/lib/languages/javascript';\\nimport xml from 'highlight.js/lib/languages/xml';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Code, {code, highlight} from '@jetbrains/ring-ui/components/code/code';\\n\\nhighlight.registerLanguage('javascript', javascript);\\nhighlight.registerLanguage('xml', xml);\\n\\nexport default {\\n  title: 'Components/Code',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: `\\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\\n\\nYou can also preload the languages you need:\\n\\n\\\\`import {highlight} from '@jetbrains/ring-ui/components/code/code'\\\\`\\n\\n\\\\`import 1c from 'highlight.js/lib/languages/1c';\\\\`\\n\\n\\\\`highlight.registerLanguage('1c', 1c);\\\\`\\n    `\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Code\\n    code={`\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const lazy = () => (\\n  <Code\\n    language=\\\"actionscript\\\"\\n    code={`\\n      package org.example.dummy {\\n          import org.dummy.*;\\n\\n          /*define package inline interface*/\\n          public interface IFooBarzable {\\n              public function foo(... pairs):Array;\\n          }\\n\\n          public class FooBar implements IFooBarzable {\\n              static private var cnt:uint = 0;\\n              private var bar:String;\\n\\n              //constructor\\n              public function TestBar(bar:String):void {\\n                  bar = bar;\\n                  ++cnt;\\n              }\\n\\n              public function foo(... pairs):Array {\\n                  pairs.push(bar);\\n                  return pairs;\\n              }\\n          }\\n      }\\n    `}\\n  />\\n);\\n\\nexport const taggedTemplate = () =>\\n  code`\\n      import React from 'react';\\n      import {code} from '@jetbrains/ring-ui/components/code/code';\\n\\n      const el = code\\\\`some('js')\\\\`;\\n    `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\\ntaggedTemplate.parameters = {\\n  hermione: {skip: true}\\n};\\n\",\"locationsMap\":{\"basic\":{\"startLoc\":{\"col\":21,\"line\":31},\"endLoc\":{\"col\":1,\"line\":44},\"startBody\":{\"col\":21,\"line\":31},\"endBody\":{\"col\":1,\"line\":44}},\"lazy\":{\"startLoc\":{\"col\":20,\"line\":48},\"endLoc\":{\"col\":1,\"line\":78},\"startBody\":{\"col\":20,\"line\":48},\"endBody\":{\"col\":1,\"line\":78}},\"tagged-template\":{\"startLoc\":{\"col\":30,\"line\":80},\"endLoc\":{\"col\":5,\"line\":86},\"startBody\":{\"col\":30,\"line\":80},\"endBody\":{\"col\":5,\"line\":86}}}},\n    notes: `\nDisplays a block of code. Syntax highlighting is loaded lazily using [dynamic imports](https://webpack.js.org/api/module-methods/#import-1).\n\nYou can also preload the languages you need:\n\n\\`import {highlight} from '@jetbrains/ring-ui/components/code/code'\\`\n\n\\`import 1c from 'highlight.js/lib/languages/1c';\\`\n\n\\`highlight.registerLanguage('1c', 1c);\\`\n    `\n  },};\n\nexport const basic = () => (\n  <Code\n    code={`\n          import React, {Component} from 'react';\n          import ChildComponent from './child-component';\n\n          const MyComponent = () => (\n            <div className=\"class\">\n              <ChildComponent prop=\"value\" />\n            </div>\n          );\n        `}\n  />\n);;\n\nbasic.storyName = 'basic';\n\nexport const lazy = () => (\n  <Code\n    language=\"actionscript\"\n    code={`\n      package org.example.dummy {\n          import org.dummy.*;\n\n          /*define package inline interface*/\n          public interface IFooBarzable {\n              public function foo(... pairs):Array;\n          }\n\n          public class FooBar implements IFooBarzable {\n              static private var cnt:uint = 0;\n              private var bar:String;\n\n              //constructor\n              public function TestBar(bar:String):void {\n                  bar = bar;\n                  ++cnt;\n              }\n\n              public function foo(... pairs):Array {\n                  pairs.push(bar);\n                  return pairs;\n              }\n          }\n      }\n    `}\n  />\n);;\n\nexport const taggedTemplate = () =>\n  code`\n      import React from 'react';\n      import {code} from '@jetbrains/ring-ui/components/code/code';\n\n      const el = code\\`some('js')\\`;\n    `;\n\ntaggedTemplate.storyName = 'tagged template';\n\ntaggedTemplate.parameters = {\n  hermione: {skip: true}\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Markdown, {md} from '@jetbrains/ring-ui/components/markdown/markdown';\\n\\nexport default {\\n  title: 'Components/Markdown',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: 'Renders Markdown.'\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Markdown\\n    source={`\\n          # Header\\n\\n          _Various_ types of **highlighting**\\n\\n          [Link](/)\\n\\n          [Link with definition][definition]\\n\\n          [definition]: /\\n\\n          > Blockquote\\n          >\\n          > Second line\\n\\n          Unordered list:\\n\\n          * List\\n          * List\\n\\n          Ordered list:\\n\\n          1. One\\n          2. Two\\n\\n          Horizontal line\\n\\n          | Some | Table |\\n          | --- | --- |\\n          | One | Two |\\n\\n          ---\\n          Some \\\\`inline(code)\\\\` inside text\\n\\n          ## Block code\\n          \\\\`\\\\`\\\\`js\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n          \\\\`\\\\`\\\\`\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const taggedTemplate = () =>\\n  md`\\n    # Header\\n\\n    _Various_ types of **highlighting**\\n\\n    [Link](/)\\n\\n    [Link with definition][definition]\\n\\n    [definition]: /\\n\\n    > Blockquote\\n    >\\n    > Second line\\n\\n    Unordered list:\\n\\n    * List\\n    * List\\n\\n    Ordered list:\\n\\n    1. One\\n    2. Two\\n\\n    Horizontal line\\n\\n    ---\\n    Some \\\\`inline(code)\\\\` inside text\\n\\n    ## Block code\\n    \\\\`\\\\`\\\\`js\\n    import React from 'react';\\n\\n    import {md} from '@jetbrains/ring-ui/components/markdown/markdown';\\n\\n    const MarkdownHeader = ({children}) => md\\\\`#\\\\${children}\\\\`;\\n    \\\\`\\\\`\\\\`\\n  `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"basic\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":65},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":65}},\"taggedTemplate\":{\"startLoc\":{\"col\":30,\"line\":69},\"endLoc\":{\"col\":3,\"line\":108},\"startBody\":{\"col\":30,\"line\":69},\"endBody\":{\"col\":3,\"line\":108}}};\n    \nimport React from 'react';\n\nimport reactDecorator from '../../.storybook/react-decorator';\n\nimport Markdown, {md} from '@jetbrains/ring-ui/components/markdown/markdown';\n\nexport default {\n  title: 'Components/Markdown',\n  decorators: [reactDecorator()],\n\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport reactDecorator from '../../.storybook/react-decorator';\\n\\nimport Markdown, {md} from '@jetbrains/ring-ui/components/markdown/markdown';\\n\\nexport default {\\n  title: 'Components/Markdown',\\n  decorators: [reactDecorator()],\\n\\n  parameters: {\\n    notes: 'Renders Markdown.'\\n  }\\n};\\n\\nexport const basic = () => (\\n  <Markdown\\n    source={`\\n          # Header\\n\\n          _Various_ types of **highlighting**\\n\\n          [Link](/)\\n\\n          [Link with definition][definition]\\n\\n          [definition]: /\\n\\n          > Blockquote\\n          >\\n          > Second line\\n\\n          Unordered list:\\n\\n          * List\\n          * List\\n\\n          Ordered list:\\n\\n          1. One\\n          2. Two\\n\\n          Horizontal line\\n\\n          | Some | Table |\\n          | --- | --- |\\n          | One | Two |\\n\\n          ---\\n          Some \\\\`inline(code)\\\\` inside text\\n\\n          ## Block code\\n          \\\\`\\\\`\\\\`js\\n          import React, {Component} from 'react';\\n          import ChildComponent from './child-component';\\n\\n          const MyComponent = () => (\\n            <div className=\\\"class\\\">\\n              <ChildComponent prop=\\\"value\\\" />\\n            </div>\\n          );\\n          \\\\`\\\\`\\\\`\\n        `}\\n  />\\n);\\n\\nbasic.storyName = 'basic';\\n\\nexport const taggedTemplate = () =>\\n  md`\\n    # Header\\n\\n    _Various_ types of **highlighting**\\n\\n    [Link](/)\\n\\n    [Link with definition][definition]\\n\\n    [definition]: /\\n\\n    > Blockquote\\n    >\\n    > Second line\\n\\n    Unordered list:\\n\\n    * List\\n    * List\\n\\n    Ordered list:\\n\\n    1. One\\n    2. Two\\n\\n    Horizontal line\\n\\n    ---\\n    Some \\\\`inline(code)\\\\` inside text\\n\\n    ## Block code\\n    \\\\`\\\\`\\\\`js\\n    import React from 'react';\\n\\n    import {md} from '@jetbrains/ring-ui/components/markdown/markdown';\\n\\n    const MarkdownHeader = ({children}) => md\\\\`#\\\\${children}\\\\`;\\n    \\\\`\\\\`\\\\`\\n  `;\\n\\ntaggedTemplate.storyName = 'tagged template';\\n\",\"locationsMap\":{\"basic\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":65},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":65}},\"tagged-template\":{\"startLoc\":{\"col\":30,\"line\":69},\"endLoc\":{\"col\":3,\"line\":108},\"startBody\":{\"col\":30,\"line\":69},\"endBody\":{\"col\":3,\"line\":108}}}},\n    notes: 'Renders Markdown.'\n  },};\n\nexport const basic = () => (\n  <Markdown\n    source={`\n          # Header\n\n          _Various_ types of **highlighting**\n\n          [Link](/)\n\n          [Link with definition][definition]\n\n          [definition]: /\n\n          > Blockquote\n          >\n          > Second line\n\n          Unordered list:\n\n          * List\n          * List\n\n          Ordered list:\n\n          1. One\n          2. Two\n\n          Horizontal line\n\n          | Some | Table |\n          | --- | --- |\n          | One | Two |\n\n          ---\n          Some \\`inline(code)\\` inside text\n\n          ## Block code\n          \\`\\`\\`js\n          import React, {Component} from 'react';\n          import ChildComponent from './child-component';\n\n          const MyComponent = () => (\n            <div className=\"class\">\n              <ChildComponent prop=\"value\" />\n            </div>\n          );\n          \\`\\`\\`\n        `}\n  />\n);;\n\nbasic.storyName = 'basic';\n\nexport const taggedTemplate = () =>\n  md`\n    # Header\n\n    _Various_ types of **highlighting**\n\n    [Link](/)\n\n    [Link with definition][definition]\n\n    [definition]: /\n\n    > Blockquote\n    >\n    > Second line\n\n    Unordered list:\n\n    * List\n    * List\n\n    Ordered list:\n\n    1. One\n    2. Two\n\n    Horizontal line\n\n    ---\n    Some \\`inline(code)\\` inside text\n\n    ## Block code\n    \\`\\`\\`js\n    import React from 'react';\n\n    import {md} from '@jetbrains/ring-ui/components/markdown/markdown';\n\n    const MarkdownHeader = ({children}) => md\\`#\\${children}\\`;\n    \\`\\`\\`\n  `;\n\ntaggedTemplate.storyName = 'tagged template';\n"],"names":[],"sourceRoot":""}
{"version":3,"file":"main.d7a14801acfa92fb8037.bundle.js","sources":["webpack:///./components/icon/icon.js"],"sourcesContent":["/**\n * @name Icon\n */\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InlineSVG from 'svg-inline-react';\nimport deprecate from 'util-deprecate';\n\nimport {Color, Size} from './icon__constants';\nimport styles from './icon.css';\n\nconst warnSize = deprecate(\n  () => {},\n  `\\`size\\`, \\`width\\` and \\`height\\` props are not recommended to use in Ring UI \\`Icon\\` component. The intrinsic sizes of SVG icon (\\`width\\` and \\`height\\` SVG attributes) are used instead.\n\nWe strongly recommend to use icons handcrafted for particular sizes. If your icon doesn't exist in the desired size, please ask your designer to draw one. \"Responsive\" checkmark should be unchecked when exporting icon.'`\n);\n\nexport default class Icon extends PureComponent {\n  static Color = Color;\n  static Size = Size;\n\n  static propTypes = {\n    className: PropTypes.string,\n    color: PropTypes.string,\n    glyph: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    height: PropTypes.number,\n    size: PropTypes.number,\n    width: PropTypes.number,\n    loading: PropTypes.bool,\n    suppressSizeWarning: PropTypes.bool\n  };\n\n  static defaultProps = ({\n    className: '',\n    color: Color.DEFAULT,\n    glyph: ''\n  });\n\n  warnSize() {\n    if (this.props.suppressSizeWarning) {\n      return;\n    }\n    warnSize();\n  }\n\n  getStyle() {\n    const {size, width, height} = this.props;\n    if (width || height) {\n      this.warnSize();\n      return {width, height};\n    }\n    if (size) {\n      this.warnSize();\n      return {\n        width: size,\n        height: size\n      };\n    }\n    return null;\n  }\n\n  isCompatibilityMode(iconSrc) {\n    const hasWidth = /width=\"[\\d\\.]+\"/ig.test(iconSrc);\n    const hasHeight = /height=\"[\\d\\.]+\"/ig.test(iconSrc);\n    return !hasWidth || !hasHeight;\n  }\n\n  render() {\n    const {\n      // eslint-disable-next-line no-unused-vars\n      className, size, color, loading, glyph, width, height, suppressSizeWarning,\n      ...restProps\n    } = this.props;\n\n    const iconSrc = glyph?.call ? String(glyph) : glyph;\n    if (!iconSrc) {\n      // eslint-disable-next-line no-console\n      console.warn('No icon source passed to Icon component', this.props);\n      return null;\n    }\n\n    const classes = classNames(styles.icon,\n      {\n        [styles[color]]: !!color,\n        [styles.loading]: loading\n      },\n      className\n    );\n\n    const glyphClasses = classNames(styles.glyph, {\n      [styles.compatibilityMode]: this.isCompatibilityMode(iconSrc)\n    });\n\n    return (\n      <span\n        {...restProps}\n        className={classes}\n      >\n        <InlineSVG\n          raw\n          src={iconSrc}\n          className={glyphClasses}\n          style={this.getStyle()}\n        />\n      </span>\n    );\n  }\n}\n\nexport {Size};\n\nexport function iconHOC(glyph, displayName) {\n  // eslint-disable-next-line react/no-multi-comp\n  return class BoundIcon extends PureComponent {\n    static Color = Color;\n    static Size = Size;\n\n    static toString() {\n      return glyph;\n    }\n\n    static displayName = displayName;\n\n    static propTypes = {\n      iconRef: PropTypes.func\n    };\n\n    render() {\n      const {iconRef, ...restProps} = this.props;\n      return <Icon ref={iconRef} {...restProps} glyph={glyph}/>;\n    }\n  };\n}\n"],"mappings":"AAaA","sourceRoot":""}
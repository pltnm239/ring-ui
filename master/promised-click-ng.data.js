window.source = {
  "title": "Promised Click Ng",
  "url": "promised-click-ng.html",
  "type": "js",
  "content": "import angular from 'angular';\nimport 'dom4';\n\nimport buttonStyles from '../button/button.css';\nimport {applyMethodToClasses} from '../global/dom';\n\nimport RingAngularComponent from '../global/ring-angular-component';\nimport {LOADER_BACKGROUND_SELECTOR} from '../button-ng/button-ng';\n/**\n * @name Promised Click Ng\n * @category Legacy Angular\n * @tags Ring UI Language\n * @description Controls the active state of a button.\n * @example\n    <example name=\"Promised Click Ng\">\n      <file name=\"index.html\">\n        <div class=\"button-example\" ng-app=\"button-test\" ng-strict-di ng-controller=\"testController as ctrl\">\n          <rg-button rg-promised-click=\"ctrl.onClick()\">Simple use</rg-button>\n          <rg-button rg-promised-click=\"ctrl.onClick()\" promised-mode=\"loader\">Simple use loader mode</rg-button>\n          <rg-button rg-promised-click test-directive>Via controller</rg-button>\n          <rg-button rg-promised-click=\"ctrl.onClick()\">Ring button</rg-button>\n        </div>\n      </file>\n      <file name=\"index.js\" webpack=\"true\">\n        import angular from 'angular';\n        import PromisedClickNG from '@jetbrains/ring-ui/components/promised-click-ng/promised-click-ng';\n        import ButtonNG from '@jetbrains/ring-ui/components/button-ng/button-ng';\n\n        var buttonTestModule = angular.module('button-test', [PromisedClickNG, ButtonNG]);\n\n        buttonTestModule.controller('testController', function($scope, $timeout) {\n          this.onClick = function () {\n            return $timeout(angular.noop, 5000);\n          };\n        });\n\n        buttonTestModule.directive('testDirective', ['$timeout', function($timeout) {\n          return {\n            require: 'rgPromisedClick',\n            link: function (scope, iElement, iAttrs, rgPromisedClick) {\n              rgPromisedClick.onClick(function () {\n                return $timeout(angular.noop, 1000);\n              });\n            }\n          }\n        }]);\n      </file>\n    </example>\n*/\n\n\nconst angularModule = angular.module('Ring.promised-click', []);\n\nconst DEFAULT_MODE = 'active';\n\nclass PromisedClickController extends RingAngularComponent {\n  static $inject = ['$scope', '$element', '$attrs', '$parse'];\n  constructor(...args) {\n    super(...args);\n\n    const {$scope, $element, $attrs, $parse} = this.$inject;\n    this.element = $element[0];\n    this.active = false;\n\n    if ($attrs.rgPromisedClick) {\n      this.onClick(e => $parse($attrs.rgPromisedClick)($scope, {event: e}));\n    }\n\n    let currentMode = null;\n\n    this.toggleActive = enable => {\n      if (currentMode === 'loader') {\n        applyMethodToClasses(enable ? 'add' : 'remove')(\n          this.element.classList,\n          buttonStyles.loader\n        );\n\n        const loaderNode = this.element.querySelector(LOADER_BACKGROUND_SELECTOR);\n        if (loaderNode) {\n          applyMethodToClasses(enable ? 'add' : 'remove')(\n            this.element.querySelector(LOADER_BACKGROUND_SELECTOR).classList,\n            buttonStyles.loaderBackground\n          );\n        }\n      } else if (currentMode === 'active') {\n        applyMethodToClasses(enable ? 'add' : 'remove')(\n          this.element.classList,\n          buttonStyles.active\n        );\n      }\n    };\n\n    const setModeParams = mode => {\n      currentMode = mode;\n    };\n\n    setModeParams($attrs.promisedMode || DEFAULT_MODE);\n\n    if ($attrs.promisedMode && $attrs.promisedMode.indexOf('{{') !== -1) {\n      $attrs.$observe('promisedMode', newMode => {\n        if (newMode !== currentMode) {\n          this.toggleActive(false);\n          setModeParams(newMode);\n        }\n      });\n    }\n  }\n\n  onClick(callback) {\n    this.element.addEventListener('click', e => {\n      if (this.active) {\n        e.preventDefault();\n      } else {\n        this.process(callback, e);\n      }\n    });\n  }\n\n  process(callback, e) {\n    const {$scope} = this.$inject;\n\n    this.promise = callback(e);\n\n    if (this.promise) {\n      this.activate();\n    }\n\n    // Do not use $evalAsync here. This code should be invoked in the same animation frame\n    // otherwise a button may be \"pressed\" twice â€“ by click and with class change.\n    if (!$scope.$root.$$phase) { // eslint-disable-line angular/no-private-call\n      $scope.$apply();\n    }\n  }\n\n  activate() {\n    this.active = true;\n\n    this.toggleActive(true);\n\n    const done = () => {\n      this.active = false;\n      this.toggleActive(false);\n    };\n\n    this.promise.then(done, done);\n  }\n}\n\nfunction rgPromisedClickDirective() {\n  return {\n    controller: PromisedClickController\n  };\n}\n\nangularModule.directive('rgPromisedClick', rgPromisedClickDirective);\n\nexport default angularModule.name;\n",
  "examples": [
    {
      "name": "Promised Click Ng",
      "url": "examples/promised-click-ng/promised-click-ng.html",
      "disableAutoSize": false,
      "files": [
        {
          "type": "html",
          "content": "\n<div class=\"button-example\" ng-app=\"button-test\" ng-strict-di ng-controller=\"testController as ctrl\">\n  <rg-button rg-promised-click=\"ctrl.onClick()\">Simple use</rg-button>\n  <rg-button rg-promised-click=\"ctrl.onClick()\" promised-mode=\"loader\">Simple use loader mode</rg-button>\n  <rg-button rg-promised-click test-directive>Via controller</rg-button>\n  <rg-button rg-promised-click=\"ctrl.onClick()\">Ring button</rg-button>\n</div>\n      ",
          "showCode": true
        },
        {
          "type": "js",
          "content": "\nimport angular from 'angular';\nimport PromisedClickNG from '@jetbrains/ring-ui/components/promised-click-ng/promised-click-ng';\nimport ButtonNG from '@jetbrains/ring-ui/components/button-ng/button-ng';\n\nvar buttonTestModule = angular.module('button-test', [PromisedClickNG, ButtonNG]);\n\nbuttonTestModule.controller('testController', function($scope, $timeout) {\n  this.onClick = function () {\n    return $timeout(angular.noop, 5000);\n  };\n});\n\nbuttonTestModule.directive('testDirective', ['$timeout', function($timeout) {\n  return {\n    require: 'rgPromisedClick',\n    link: function (scope, iElement, iAttrs, rgPromisedClick) {\n      rgPromisedClick.onClick(function () {\n        return $timeout(angular.noop, 1000);\n      });\n    }\n  }\n}]);\n      ",
          "showCode": true
        }
      ]
    }
  ],
  "description": "Controls the active state of a button.",
  "attrs": {
    "name": "Promised Click Ng",
    "category": "Legacy Angular",
    "tags": "Ring UI Language",
    "description": "Controls the active state of a button.",
    "example": "    <example name=\"Promised Click Ng\">\n      <file name=\"index.html\">\n        <div class=\"button-example\" ng-app=\"button-test\" ng-strict-di ng-controller=\"testController as ctrl\">\n          <rg-button rg-promised-click=\"ctrl.onClick()\">Simple use</rg-button>\n          <rg-button rg-promised-click=\"ctrl.onClick()\" promised-mode=\"loader\">Simple use loader mode</rg-button>\n          <rg-button rg-promised-click test-directive>Via controller</rg-button>\n          <rg-button rg-promised-click=\"ctrl.onClick()\">Ring button</rg-button>\n        </div>\n      </file>\n      <file name=\"index.js\" webpack=\"true\">\n        import angular from 'angular';\n        import PromisedClickNG from '@jetbrains/ring-ui/components/promised-click-ng/promised-click-ng';\n        import ButtonNG from '@jetbrains/ring-ui/components/button-ng/button-ng';\n\n        var buttonTestModule = angular.module('button-test', [PromisedClickNG, ButtonNG]);\n\n        buttonTestModule.controller('testController', function($scope, $timeout) {\n          this.onClick = function () {\n            return $timeout(angular.noop, 5000);\n          };\n        });\n\n        buttonTestModule.directive('testDirective', ['$timeout', function($timeout) {\n          return {\n            require: 'rgPromisedClick',\n            link: function (scope, iElement, iAttrs, rgPromisedClick) {\n              rgPromisedClick.onClick(function () {\n                return $timeout(angular.noop, 1000);\n              });\n            }\n          }\n        }]);\n      </file>\n    </example>"
  }
};
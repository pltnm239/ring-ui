"use strict";(self.webpackChunk_jetbrains_ring_ui=self.webpackChunk_jetbrains_ring_ui||[]).push([[5846],{"./src/table/table.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,EmptyTable:()=>EmptyTable,MultiTableStory:()=>MultiTableStory,WithCustomColumns:()=>WithCustomColumns,default:()=>table_table_stories});var react=__webpack_require__("./node_modules/react/index.js"),grid=__webpack_require__("./src/grid/grid.tsx"),row=__webpack_require__("./src/grid/row.tsx"),col=__webpack_require__("./src/grid/col.tsx"),link_link=__webpack_require__("./src/link/link.tsx"),pager=__webpack_require__("./src/pager/pager.tsx"),button_button=__webpack_require__("./src/button/button.tsx"),table=__webpack_require__("./src/table/table.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");class MultiTable extends react.PureComponent{componentDidUpdate(prevProps){if(prevProps.children){const prevSelections=prevProps.children.map((element=>element.props.selection)),prevFocusedIndex=prevSelections.findIndex((selection=>selection.getFocused())),prevFocused=prevSelections[prevFocusedIndex];this.props.children.map((element=>element.props.selection)).filter((selection=>selection.getFocused())).includes(prevFocused)&&prevProps.children[prevFocusedIndex].props.onSelect?.(prevFocused.resetFocus())}}onUpPress=()=>{const{children:tables}=this.props,tableIndex=tables.findIndex((({props:{selection}})=>selection.getFocused())),currentTable=tables[tableIndex].props,prevTable=tables[tableIndex-1]?tables[tableIndex-1].props:null;let newSelection=currentTable.selection.moveUp();return newSelection?currentTable.onSelect?.(newSelection):prevTable&&(currentTable.onSelect?.(currentTable.selection.resetFocus()),newSelection=prevTable.selection.moveUp(),newSelection&&prevTable.onSelect?.(newSelection)),!1};onDownPress=()=>{const{children:tables}=this.props,tableIndex=tables.findIndex((({props:{selection}})=>selection.getFocused())),currentTable=tables[tableIndex].props,nextTable=tables[tableIndex+1]?tables[tableIndex+1].props:null;let newSelection=currentTable.selection.moveDown();return newSelection?currentTable.onSelect?.(newSelection):nextTable&&(currentTable.onSelect?.(currentTable.selection.resetFocus()),newSelection=nextTable.selection.moveDown(),newSelection&&nextTable.onSelect?.(newSelection)),!1};onEscPress=()=>{const{children}=this.props;react.Children.forEach(children,(({props:{selection,onSelect}})=>{onSelect(selection.reset())}))};onCmdAPress=()=>{const{children}=this.props;return react.Children.forEach(children,(({props:{selection,onSelect}})=>{onSelect(selection.selectAll())})),!1};shortcuts={up:this.onUpPress,down:this.onDownPress,esc:this.onEscPress,"command+a":this.onCmdAPress,"ctrl+a":this.onCmdAPress};render(){return(0,jsx_runtime.jsx)("div",{"data-test":"ring-multitable",children:react.Children.map(this.props.children,(child=>{const props={shortcuts:this.shortcuts};return(0,react.cloneElement)(child,props)}))})}}MultiTable.__docgenInfo={description:"",methods:[{name:"onUpPress",docblock:null,modifiers:[],params:[],returns:null},{name:"onDownPress",docblock:null,modifiers:[],params:[],returns:null},{name:"onEscPress",docblock:null,modifiers:[],params:[],returns:null},{name:"onCmdAPress",docblock:null,modifiers:[],params:[],returns:null}],displayName:"MultiTable",props:{children:{required:!0,tsType:{name:"Array",elements:[{name:"ReactElement",elements:[{name:"Omit",elements:[{name:"intersection",raw:"Omit<P, keyof SelectionShortcutsAddProps<T>> & SelectionShortcutsOuterProps<T>",elements:[{name:"Omit",elements:[{name:"P"},{name:"SelectionShortcutsAddProps",elements:[{name:"T"}],raw:"SelectionShortcutsAddProps<T>"}],raw:"Omit<P, keyof SelectionShortcutsAddProps<T>>"},{name:"SelectionShortcutsOuterProps",elements:[{name:"T"}],raw:"SelectionShortcutsOuterProps<T>"}]},{name:"DisableHoverAddProps"}],raw:"Omit<P, keyof DisableHoverAddProps>"}],raw:"ReactElement<TableAttrs<SelectionItem>>"}],raw:"ReactElement<TableAttrs<SelectionItem>>[]"},description:""}}};var table_selection=__webpack_require__("./src/table/selection.ts"),table_stories=__webpack_require__("./src/table/table.stories.json"),table_examples2=__webpack_require__("./src/table/table.examples2.json");const table_table_stories={title:"Components/Table",component:table.X,parameters:{screenshots:{skip:!0}},argTypes:{selection:{control:{disable:!0}}}},TOTAL=table_stories.length,Basic=args=>{const{onSort,onSelect,withCaption,onReorder,...restProps}=args,[data,setData]=(0,react.useState)([]),[selection,setSelection]=(0,react.useState)(new table_selection.A),[sortKey,setSortKey]=(0,react.useState)("country"),[sortOrder,setSortOrder]=(0,react.useState)(!0),[page,setPage]=(0,react.useState)(1),isItemSelectable=(0,react.useCallback)((item=>14!==item.id),[]);(0,react.useEffect)((()=>{let newData=[...table_stories];newData.sort(((a,b)=>String(a[sortKey]).localeCompare(String(b[sortKey]))*(sortOrder?1:-1))),newData=newData.slice(7*(page-1),7*(page-1)+7);const newSelection=new table_selection.A({data:newData,isItemSelectable});setData(newData),setSelection(newSelection)}),[isItemSelectable,page,sortKey,sortOrder]);const handleSort=(0,react.useCallback)((event=>{onSort?.(event),setSortKey(event.column.id),setSortOrder(event.order)}),[onSort]);return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(table.A,{...restProps,data,selection,onSelect:newSelection=>{onSelect?.(newSelection),setSelection(newSelection)},onReorder:event=>{onReorder?.(event),setData(event.data)},onSort:handleSort,sortKey,sortOrder,caption:withCaption?"Countries":void 0,isItemSelectable,getItemDataTest:it=>String(it.country),dragHandleTitle:"Drag me!"}),(0,jsx_runtime.jsxs)(grid.xA,{children:[(0,jsx_runtime.jsx)(row.A,{children:(0,jsx_runtime.jsx)(col.A,{children:(0,jsx_runtime.jsx)(pager.A,{total:TOTAL,pageSize:7,currentPage:page,disablePageSizeSelector:!0,onPageChange:setPage})})}),(0,jsx_runtime.jsx)(row.A,{children:(0,jsx_runtime.jsxs)(col.A,{children:["Active items: ",[...selection.getActive()].map((item=>item.country)).join(", ")]})}),(0,jsx_runtime.jsx)(row.A,{children:(0,jsx_runtime.jsxs)(col.A,{children:[(0,jsx_runtime.jsx)(button_button.Ay,{onClick:()=>setData([...data]),children:"Recreate data array"}),1===page&&data.length>5&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[" ",(0,jsx_runtime.jsx)("span",{id:"button-select-bulgaria",children:selection.isSelected(data[3])?(0,jsx_runtime.jsxs)(button_button.Ay,{onClick:()=>setSelection(selection.deselect(data[3])),children:["Deselect ",data[3].country]}):(0,jsx_runtime.jsxs)(button_button.Ay,{onClick:()=>setSelection(selection.select(data[3])),children:["Select ",data[3].country]})}),(0,jsx_runtime.jsxs)("span",{id:"button-select-finland",children:[" ",selection.isSelected(data[5])?(0,jsx_runtime.jsxs)(button_button.Ay,{onClick:()=>setSelection(selection.deselect(data[5])),children:["Deselect ",data[5].country]}):(0,jsx_runtime.jsxs)(button_button.Ay,{onClick:()=>setSelection(selection.select(data[5])),children:["Select ",data[5].country]})]})]})]})})]})]})};Basic.args={columns:[{id:"country",title:"Country",sortable:!0},{id:"id",title:"ID",rightAlign:!0},{id:"city",title:"City",getDataTest:item=>item.city,sortable:!0},{id:"url",title:"URL",getValue:({url})=>(0,jsx_runtime.jsx)(link_link.A,{href:url,children:url})}],autofocus:!0,selectable:!0,draggable:!0,withCaption:!1,isItemSelectable:item=>14!==item.id},Basic.argTypes={data:{control:{disable:!0}},sortKey:{control:{disable:!0}},sortOrder:{control:{disable:!0}},caption:{control:{disable:!0}},onSelect:{},onReorder:{}},Basic.storyName="basic";const data1=table_examples2.o,data2=table_examples2.X,MultiTableStory=()=>{const[selection1,setSelection1]=(0,react.useState)(new table_selection.A({data:data1})),[selection2,setSelection2]=(0,react.useState)(new table_selection.A({data:data2}));return(0,jsx_runtime.jsxs)(MultiTable,{children:[(0,jsx_runtime.jsx)(table.A,{data:data1,columns:[{id:"continent",title:"Continent"},{id:"url",title:"URL"}],caption:"Continents",selection:selection1,onSelect:setSelection1}),(0,jsx_runtime.jsx)(table.A,{data:data2,columns:[{id:"country",title:"Country"},{id:"city",title:"City"},{id:"url",title:"URL"}],caption:"Countries",autofocus:!0,selection:selection2,onSelect:setSelection2})]})};MultiTableStory.storyName="multi table";const EmptyTable=({onSelect,...restProps})=>{const[selection,setSelection]=(0,react.useState)(new table_selection.A({}));return(0,jsx_runtime.jsx)(table.A,{...restProps,selection,onSelect:newSelection=>{onSelect?.(newSelection),setSelection(newSelection)}})};EmptyTable.args={data:[],columns:[{id:"country",title:"Country"},{id:"city",title:"City"},{id:"url",title:"URL"}],renderEmpty:()=>"Empty table",selectable:!1,maxColSpan:3},EmptyTable.storyName="empty table";const WithCustomColumns=args=>{const[selection]=(0,react.useState)(new table_selection.A({}));return(0,jsx_runtime.jsx)(table.A,{...args,selection})};WithCustomColumns.args={data:[{id:"1",type:"A",valueA1:"valueA1",valueA2:"valueA2"},{id:"2",type:"A",valueA1:"valueA1",valueA2:"valueA2"},{type:"B",id:"3",valueB1:"valueB1",valueB2:"valueB2",valueB3:"valueB3"},{type:"B",id:"4",valueB1:"valueB1",valueB2:"valueB2",valueB3:"valueB3"}],columns:item=>null===item?[{id:"valueB1",title:"valueB1",colSpan:1},{id:"valueB2",title:"valueB2"},{id:"valueB3",title:"valueB3"}]:"A"===item.type?[{id:"valueA1",title:"valueA1",getValue:rowItem=>"A"===rowItem.type?rowItem.valueA1:null,colSpan:2},{id:"valueA2",title:"valueA2",getValue:rowItem=>"A"===rowItem.type?rowItem.valueA2:null}]:"B"===item.type?[{id:"valueB1",title:"valueB1",getValue:rowItem=>"B"===rowItem.type?rowItem.valueB1:null},{id:"valueB2",title:"valueB2",getValue:rowItem=>"B"===rowItem.type?rowItem.valueB2:null},{id:"valueB3",title:"valueB3",getValue:rowItem=>"B"===rowItem.type?rowItem.valueB3:null}]:[],renderEmpty:()=>"Empty table",selectable:!1},WithCustomColumns.storyName="Table with custom rows",Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"args => {\n  const {\n    onSort,\n    onSelect,\n    withCaption,\n    onReorder,\n    ...restProps\n  } = args;\n  const [data, setData] = useState<Item[]>([]);\n  const [selection, setSelection] = useState<Selection<Item>>(new Selection());\n  const [sortKey, setSortKey] = useState<string>('country');\n  const [sortOrder, setSortOrder] = useState<boolean>(true);\n  const [page, setPage] = useState<number>(1);\n  const isItemSelectable = useCallback((item: Item) => item.id !== 14, []);\n  useEffect(() => {\n    let newData: Item[] = [...mock];\n    newData.sort((a, b) => String(a[sortKey]).localeCompare(String(b[sortKey])) * (sortOrder ? 1 : -1));\n    newData = newData.slice((page - 1) * PAGE_SIZE, (page - 1) * PAGE_SIZE + PAGE_SIZE);\n    const newSelection = new Selection({\n      data: newData,\n      isItemSelectable\n    });\n    setData(newData);\n    setSelection(newSelection);\n  }, [isItemSelectable, page, sortKey, sortOrder]);\n  const handleSort = useCallback((event: SortParams) => {\n    onSort?.(event);\n    setSortKey(event.column.id);\n    setSortOrder(event.order);\n  }, [onSort]);\n  return <div>\n      <Table {...restProps} data={data} selection={selection} onSelect={newSelection => {\n      onSelect?.(newSelection);\n      setSelection(newSelection);\n    }} onReorder={event => {\n      onReorder?.(event);\n      setData(event.data);\n    }} onSort={handleSort} sortKey={sortKey} sortOrder={sortOrder} caption={withCaption ? 'Countries' : undefined} isItemSelectable={isItemSelectable} getItemDataTest={it => String(it.country)} dragHandleTitle=\"Drag me!\" />\n\n      <Grid>\n        <Row>\n          <Col>\n            <Pager total={TOTAL} pageSize={PAGE_SIZE} currentPage={page} disablePageSizeSelector onPageChange={setPage} />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            Active items: {[...selection.getActive()].map(item => item.country).join(', ')}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <Button onClick={() => setData([...data])}>\n              Recreate data array\n            </Button>\n            {page === 1 && data.length > 5 && <>\n                {' '}\n                <span id=\"button-select-bulgaria\">\n                  {selection.isSelected(data[3]) ? <Button onClick={() => setSelection(selection.deselect(data[3]))}>\n                        Deselect {data[3].country}\n                      </Button> : <Button onClick={() => setSelection(selection.select(data[3]))}>\n                        Select {data[3].country}\n                      </Button>}\n                </span>\n\n                <span id=\"button-select-finland\">\n                  {' '}\n                  {selection.isSelected(data[5]) ? <Button onClick={() => setSelection(selection.deselect(data[5]))}>\n                        Deselect {data[5].country}\n                      </Button> : <Button onClick={() => setSelection(selection.select(data[5]))}>\n                        Select {data[5].country}\n                      </Button>}\n                </span>\n              </>}\n          </Col>\n        </Row>\n      </Grid>\n    </div>;\n}",...Basic.parameters?.docs?.source}}},MultiTableStory.parameters={...MultiTableStory.parameters,docs:{...MultiTableStory.parameters?.docs,source:{originalSource:"() => {\n  const [selection1, setSelection1] = useState(new Selection({\n    data: data1\n  }));\n  const [selection2, setSelection2] = useState(new Selection({\n    data: data2\n  }));\n  const columns1 = [{\n    id: 'continent',\n    title: 'Continent'\n  }, {\n    id: 'url',\n    title: 'URL'\n  }];\n  const columns2 = [{\n    id: 'country',\n    title: 'Country'\n  }, {\n    id: 'city',\n    title: 'City'\n  }, {\n    id: 'url',\n    title: 'URL'\n  }];\n  return <MultiTable>\n      <Table data={data1} columns={columns1} caption=\"Continents\" selection={selection1} onSelect={setSelection1} />\n\n      <Table data={data2} columns={columns2} caption=\"Countries\" autofocus selection={selection2} onSelect={setSelection2} />\n    </MultiTable>;\n}",...MultiTableStory.parameters?.docs?.source}}},EmptyTable.parameters={...EmptyTable.parameters,docs:{...EmptyTable.parameters?.docs,source:{originalSource:"({\n  onSelect,\n  ...restProps\n}) => {\n  const [selection, setSelection] = useState(new Selection({}));\n  return <Table {...restProps} selection={selection} onSelect={newSelection => {\n    onSelect?.(newSelection);\n    setSelection(newSelection);\n  }} />;\n}",...EmptyTable.parameters?.docs?.source}}},WithCustomColumns.parameters={...WithCustomColumns.parameters,docs:{...WithCustomColumns.parameters?.docs,source:{originalSource:"args => {\n  const [selection] = useState(new Selection<FlexItem>({}));\n  return <Table {...args} selection={selection} />;\n}",...WithCustomColumns.parameters?.docs?.source}}}}}]);